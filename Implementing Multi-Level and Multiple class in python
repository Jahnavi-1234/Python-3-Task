# Class Person with private fields, getter/setter methods, and a say_hello method
# Color added
class Person:
    def __init__(self, name, age):
        print("New person has been born")
        self._name = name  
        self._age = age    

    # Getter and Setter for name
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    # Getter and Setter for age
    def get_age(self):
        return self._age

    def set_age(self, age):
        self._age = age

#say_hello() with a print statement of the name of the Person.
    def say_hello(self):
        print("Hello, my name is",self._name)

# Class Employee inherited from Person
class Employee(Person):
    def __init__(self, name, age, position):
        Person.__init__(self, name, age)  # Directly call Person's __init__ method
        self._position = position  

#Implement method introduce() that uses say_hello() and prints the position after it.
    def introduce(self):
        self.say_hello()
        print(f"My position is ",self._position)

# Class Student inherited from Person
class Student(Person):
    def __init__(self, name, age):
        Person.__init__(self, name, age)  # Directly call Person's __init__ method
        self._position = "Student"  

    def introduce(self):
        self.say_hello()
        print(f"My position is ",self._position)

# Class WorkingStudent inherited from both Employee and Student
class WorkingStudent(Employee, Student):
    def __init__(self, name, age, position):
        Employee.__init__(self, name, age, position)  # Call Employee's __init__
        Student.__init__(self, name, age)  # Call Student's __init__

    def __call__(self):
        self.say_hello()
        self.introduce()

# Create instances and test the methods
person = Person("David", 30)
person.say_hello()

employee = Employee("Jahnavi", 24, "Quality Assurance Engineer")
employee.introduce()

student = Student("Prashanth", 18)
student.introduce()

working_student = WorkingStudent("Mounish", 22, "Full Stack Developer")
# Calls the __call__ method, which calls say_hello() and introduce()
working_student()  

